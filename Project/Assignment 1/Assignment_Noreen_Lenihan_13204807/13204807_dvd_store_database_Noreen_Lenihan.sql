/* Assignment SQL file for 'Ass1' or DVD Store Database
*
* Student: Noreen Lenihan
* Student ID: 13204807
* Assignment due date: 26.3.2014
*
* Please view accompanying screenshots in PDF Report
*/


-- Connect to schema 'Ass1'
CONNECT Ass1

-- Confirm user is 'Ass1'
SHOW USER;


--
-- Table structure for table DVD entity or ASS1_DVD
--

CREATE TABLE ASS1_DVD (
  DVD_ID NUMBER(10) NOT NULL,
  DVD_TITLE NVARCHAR2(50) NOT NULL,
  DVD_YEAR DATE NOT NULL,
  STATUS NVARCHAR2(10) NOT NULL,
  PRICE NUMBER(10, 2) NOT NULL,
  GENRE NVARCHAR2(20) NOT NULL,
  PRIMARY KEY(DVD_ID)
);


-- Confirm data types and columns for ASS1_DVD
DESCRIBE ASS1_DVD;

--
-- Create ASS1_COPY table that maps 'Copy' entity
--
CREATE TABLE ASS1_COPY (
	COPY_ID NUMBER(10) NOT NULL,
	AVAILABILITY NVARCHAR2(2) NOT NULL,
	DATE_COPY_ADDED TIMESTAMP NOT NULL,
	DVD_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(COPY_ID),
	FOREIGN KEY(DVD_ID) REFERENCES ASS1_DVD(DVD_ID)
);

-- Double check table description
DESCRIBE ASS1_COPY;

--
-- Create 'ASS1_Member' table to map 'Member' entity
--
CREATE TABLE ASS1_MEMBER (
	MEMBER_NBR NUMBER(10) NOT NULL,
	FNAME NVARCHAR2(20) NOT NULL,
	LNAME NVARCHAR2(20) NOT NULL,
	DATE_REG TIMESTAMP NOT NULL,
	PHONE NUMBER(15) NOT NULL,
	ADDR NVARCHAR2(100) NOT NULL,
	PRIMARY KEY(MEMBER_NBR)
);

-- View table description of 'ASS1_MEMBER'
DESCRIBE ASS1_MEMBER;

--
-- 'Director' table
--
CREATE TABLE ASS1_DIRECTOR (
	DIR_ID NUMBER(10) NOT NULL,
	FNAME NVARCHAR2(20) NOT NULL,
	LNAME NVARCHAR2(20) NOT NULL,
	PRIMARY KEY(DIR_ID)
);

-- View table description of 'ASS1_DIRECTOR' table
DESCRIBE ASS1_DIRECTOR;

--
-- Table structure for ASS1_FILM_CHAR that maps the 'Character' entity
--
CREATE TABLE ASS1_FILM_CHAR (
	CHAR_ID NUMBER(10) NOT NULL,
	FNAME NVARCHAR2(20) NOT NULL,
	LNAME NVARCHAR2(20) NOT NULL,
	PRIMARY KEY(CHAR_ID)
);

-- View table description
DESCRIBE ASS1_FILM_CHAR; 

--
-- Create table to map 'Actor' entity, that is, 'ASS1_ACTOR'
--
CREATE TABLE ASS1_ACTOR (
	ACT_ID NUMBER(10) NOT NULL,
	FNAME NVARCHAR2(20) NOT NULL,
	LNAME NVARCHAR2(20) NOT NULL,
	PRIMARY KEY(ACT_ID)
);

-- View table created for 'ASS1_ACTOR'
DESCRIBE ASS1_ACTOR;

--
-- Create a junction table for 'Character' and 'Actor' entities - 'ASS1_CHAR_ACTOR'
--
CREATE TABLE ASS1_CHAR_ACTOR (
	CHAR_ID NUMBER(10) NOT NULL,
	ACT_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(CHAR_ID, ACT_ID),
	FOREIGN KEY(CHAR_ID) REFERENCES ASS1_FILM_CHAR(CHAR_ID),
	FOREIGN KEY(ACT_ID) REFERENCES ASS1_ACTOR(ACT_ID)

);

-- View table description
DESCRIBE ASS1_CHAR_ACTOR;

--
-- Create a table that maps Rental entity
--
CREATE TABLE ASS1_RENTAL (
	RENTAL_ID NUMBER(10) NOT NULL,
	RENT_REVENUE NUMBER(10, 2) NOT NULL,
	DATE_RENT TIMESTAMP NOT NULL,
	DATE_RETURN TIMESTAMP NULL,
	MEMBER_NBR NUMBER(10) NOT NULL,
	COPY_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(RENTAL_ID),
	FOREIGN KEY(MEMBER_NBR) REFERENCES ASS1_MEMBER(MEMBER_NBR),
	FOREIGN KEY(COPY_ID) REFERENCES ASS1_COPY(COPY_ID)
);

-- View table description for 'ASS1_RENTAL'
DESCRIBE ASS1_RENTAL;

--
-- Create a table for 'Exrental' entity
--
CREATE TABLE ASS1_EXRENTAL (
	EXRENTAL_ID NUMBER(10) NOT NULL,
	EXRENTAL_REVENUE NUMBER(10, 2) NOT NULL,
	DATE_SALE TIMESTAMP NOT NULL,
	COPY_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(EXRENTAL_ID),
	FOREIGN KEY(COPY_ID) REFERENCES ASS1_COPY(COPY_ID)
);

-- View table description of 'ASS1_EXRENTAL'
DESCRIBE ASS1_EXRENTAL;

--
-- Create junction table for decomposing DVD and Director relationship 
--
CREATE TABLE ASS1_DVD_DIR (
	DIR_ID NUMBER(10) NOT NULL,
	DVD_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(DIR_ID, DVD_ID),
	FOREIGN KEY(DVD_ID) REFERENCES ASS1_DVD(DVD_ID),
	FOREIGN KEY(DIR_ID) REFERENCES ASS1_DIRECTOR(DIR_ID)
);

-- View table description of 'ASS1_DVD_DIR'
DESCRIBE ASS1_DVD_DIR;


--
-- Create junction table for the M:N relationship between DVD and Actor entity
--
CREATE TABLE ASS1_DVD_ACT (
	ACT_ID NUMBER(10) NOT NULL,
	DVD_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(ACT_ID, DVD_ID),
	FOREIGN KEY(DVD_ID) REFERENCES ASS1_DVD(DVD_ID),
	FOREIGN KEY(ACT_ID) REFERENCES ASS1_ACTOR(ACT_ID)
);

-- View table description
DESCRIBE ASS1_DVD_ACT;

--
-- Create junction table for the M:M relationship between DVD and Character entities
--
CREATE TABLE ASS1_DVD_CHAR (
	CHAR_ID NUMBER(10) NOT NULL,
	DVD_ID NUMBER(10) NOT NULL,
	PRIMARY KEY(CHAR_ID, DVD_ID),
	FOREIGN KEY(DVD_ID) REFERENCES ASS1_DVD(DVD_ID),
	FOREIGN KEY(CHAR_ID) REFERENCES ASS1_FILM_CHAR(CHAR_ID)
);

-- View table description for junction table
DESCRIBE ASS1_DVD_CHAR;


/* Procedures */


/* This procedure facilitates accurate transactions of selling exrentals.
* It first checks that the copy in question is actually for sale, and
* that it is still available, and if these criteria are met, it updates the
* availability of the copy to 'N' to signify that it is sold, and it also
* inserts a new tuple/record in the Exrental table. Procedures are the
* recommended protocol, moreso than triggers, for these types of transactions.
*/
CREATE OR REPLACE PROCEDURE ASS1_NEW_EXRENTAL(COPYID IN NUMBER)
IS
	SALEPRICE NUMBER(10,2);
	DVDID NUMBER(10);
	DVD_NOT_IN_STOCK_ERROR exception;
	PRAGMA EXCEPTION_INIT (DVD_NOT_IN_STOCK_ERROR, -20001);
	EXRENTAL_AVAIL NVARCHAR2(10);
	DVD_STATUS NVARCHAR2(10);
BEGIN
	SELECT DVD_ID INTO DVDID FROM ASS1_COPY WHERE ASS1_COPY.COPY_ID = COPYID;
	SELECT PRICE INTO SALEPRICE FROM ASS1_DVD WHERE ASS1_DVD.DVD_ID = DVDID;
	SELECT AVAILABILITY INTO EXRENTAL_AVAIL FROM ASS1_COPY WHERE ASS1_COPY.COPY_ID = COPYID;
	SELECT STATUS INTO DVD_STATUS FROM ASS1_DVD WHERE DVD_ID = DVDID;
IF EXRENTAL_AVAIL = 'N' OR DVD_STATUS = 'RENT' THEN
RAISE DVD_NOT_IN_STOCK_ERROR;
END IF;
UPDATE ASS1_COPY SET ASS1_COPY.AVAILABILITY = 'N' WHERE ASS1_COPY.COPY_ID = COPYID;
INSERT INTO ASS1_EXRENTAL VALUES (NULL, SALEPRICE, CURRENT_TIMESTAMP, COPYID);
EXCEPTION 
WHEN DVD_NOT_IN_STOCK_ERROR
THEN
	RAISE_APPLICATION_ERROR(-20001, 'Exrental DVD not in stock!');
END ASS1_NEW_EXRENTAL;
/

/* This procedure ensures the accuracy of rental transactions, by first
* checking that a DVD copy is available and has a commercial status of 'RENT'.
* If so, the 'availability' status of the copy is updated to 'N' and a new
* tuple is created in the 'Rental' table that inserts information about the transaction.
*/
CREATE OR REPLACE PROCEDURE ASS1_NEW_RENTAL(COPYID IN NUMBER, MEMBER IN NUMBER)
IS
	SALEPRICE NUMBER(10,2);
	DVDID NUMBER(10);
	RENTAL_NOT_IN_STOCK_ERROR EXCEPTION;
	PRAGMA EXCEPTION_INIT (RENTAL_NOT_IN_STOCK_ERROR, -20002);
	RENTAL_AVAIL NVARCHAR2(10);
	DVD_STATUS NVARCHAR2(10);
BEGIN
	SELECT DVD_ID INTO DVDID FROM ASS1_COPY WHERE ASS1_COPY.COPY_ID = COPYID;
	SELECT PRICE INTO SALEPRICE FROM ASS1_DVD WHERE ASS1_DVD.DVD_ID = DVDID;
	SELECT AVAILABILITY INTO RENTAL_AVAIL FROM ASS1_COPY WHERE ASS1_COPY.DVD_ID = DVDID;
	SELECT STATUS INTO DVD_STATUS FROM ASS1_DVD WHERE ASS1_DVD.DVD_ID = DVDID;
IF RENTAL_AVAIL = 'N' OR DVD_STATUS = 'SALE' THEN
	RAISE RENTAL_NOT_IN_STOCK_ERROR;
END IF;
UPDATE ASS1_COPY SET ASS1_COPY.AVAILABILITY = 'N' WHERE ASS1_COPY.COPY_ID = COPYID;
INSERT INTO ASS1_RENTAL VALUES (NULL, SALEPRICE, CURRENT_TIMESTAMP, NULL, MEMBER, COPYID);
EXCEPTION 
WHEN RENTAL_NOT_IN_STOCK_ERROR
THEN
	RAISE_APPLICATION_ERROR(-20002, 'Rental DVD not in stock!');
END ASS1_NEW_RENTAL;
/


/* Our final procedure deals with updating our tables when a DVD rental has been returned by
* a member. Specifically, we change 'availability' to 'Y' in the Copy table when dvd is 
* returned, to show that it is now available to be rented again, and we also update
* the date_return (date rental was returned) column with the current date and time when
* transaction takes place.
*/

CREATE OR REPLACE PROCEDURE ASS1_RENTAL_RETURN(RENTALID NUMBER)
IS
COPY_NBR NUMBER(10);
COPY_AVAIL NVARCHAR2(10);
DATE_OF_RETURN TIMESTAMP;
ALREADY_RETURNED_ERROR EXCEPTION;
PRAGMA EXCEPTION_INIT (ALREADY_RETURNED_ERROR, -20003);
BEGIN
SELECT COPY_ID INTO COPY_NBR FROM ASS1_RENTAL WHERE RENTAL_ID = RENTALID;
SELECT AVAILABILITY INTO COPY_AVAIL FROM ASS1_COPY WHERE COPY_ID = COPY_NBR;
SELECT DATE_RETURN INTO DATE_OF_RETURN FROM ASS1_RENTAL WHERE RENTAL_ID = RENTALID;
IF DATE_OF_RETURN IS NOT NULL OR COPY_AVAIL = 'Y' THEN
RAISE ALREADY_RETURNED_ERROR;
END IF;
UPDATE ASS1_COPY SET AVAILABILITY = 'Y' WHERE COPY_ID = COPY_NBR;
UPDATE ASS1_RENTAL SET DATE_RETURN = CURRENT_TIMESTAMP WHERE RENTAL_ID = RENTALID;
EXCEPTION 
WHEN ALREADY_RETURNED_ERROR
THEN
	RAISE_APPLICATION_ERROR(-20003, 'DVD rental already returned!');
END ASS1_RENTAL_RETURN;
/


/* Sequences & Triggers */

-- Create sequence for DVD table
CREATE SEQUENCE ASS1_DVD_SEQ;

-- Create trigger to auto-increment DVD_ID with each insertion on DVD table
CREATE OR REPLACE TRIGGER ASS1_DVD_INC
BEFORE INSERT ON ASS1_DVD 
FOR EACH ROW
BEGIN
SELECT ASS1_DVD_SEQ.NEXTVAL
INTO :NEW.DVD_ID
FROM DUAL;
END;
/

-- Create sequence for Copy table
CREATE SEQUENCE ASS1_COPY_SEQ;

-- Create trigger to auto-increment COPY_ID with each insertion on COPY table
CREATE OR REPLACE TRIGGER ASS1_COPY_INC
BEFORE INSERT ON ASS1_COPY
FOR EACH ROW
BEGIN
SELECT ASS1_COPY_SEQ.NEXTVAL
INTO :NEW.COPY_ID
FROM DUAL;
END;
/

-- Create sequence for Rental table
CREATE SEQUENCE ASS1_RENTAL_SEQ;

-- Create trigger to auto-increment RENTAL_ID with each insertion on RENTAL table
CREATE OR REPLACE TRIGGER ASS1_RENTAL_INC
BEFORE INSERT ON ASS1_RENTAL
FOR EACH ROW
BEGIN
SELECT ASS1_RENTAL_SEQ.NEXTVAL
INTO :NEW.RENTAL_ID
FROM DUAL;
END;
/

-- Create sequence for Exrental table
CREATE SEQUENCE ASS1_EXRENTAL_SEQ;

-- Create trigger to auto-increment EXRENTAL_ID with each insertion on EXRENTAL table
CREATE OR REPLACE TRIGGER ASS1_EXRENTAL_INC
BEFORE INSERT ON ASS1_EXRENTAL
FOR EACH ROW
BEGIN
SELECT ASS1_EXRENTAL_SEQ.NEXTVAL
INTO :NEW.EXRENTAL_ID
FROM DUAL;
END;
/

-- Create sequence for Actor table
CREATE SEQUENCE ASS1_ACTOR_SEQ;

-- Create trigger to auto-increment ACT_ID with each insertion on ACTOR table
CREATE OR REPLACE TRIGGER ASS1_ACT_INC
BEFORE INSERT ON ASS1_ACTOR
FOR EACH ROW
BEGIN
SELECT ASS1_ACTOR_SEQ.NEXTVAL
INTO :NEW.ACT_ID
FROM DUAL;
END;
/

-- Create sequence for Film_Char table
CREATE SEQUENCE ASS1_CHAR_SEQ;

-- Create trigger to auto-increment CHAR_ID with each insertion on FILM_CHAR table
CREATE OR REPLACE TRIGGER ASS1_CHAR_INC
BEFORE INSERT ON ASS1_FILM_CHAR
FOR EACH ROW
BEGIN
SELECT ASS1_CHAR_SEQ.NEXTVAL
INTO :NEW.CHAR_ID
FROM DUAL;
END;
/

-- Create sequence for Director table
CREATE SEQUENCE ASS1_DIR_SEQ;

-- Create trigger to auto-increment DIR_ID with each insertion on DIRECTOR table
CREATE OR REPLACE TRIGGER ASS1_DIR_INC
BEFORE INSERT ON ASS1_DIRECTOR
FOR EACH ROW
BEGIN
SELECT ASS1_DIR_SEQ.NEXTVAL
INTO :NEW.DIR_ID
FROM DUAL;
END;
/

-- Create sequence for Member table
CREATE SEQUENCE ASS1_MEMBER_SEQ;

-- Create trigger to auto-increment MEMBER_NBR with each insertion on MEMBER table
CREATE OR REPLACE TRIGGER ASS1_MEMBER_INC
BEFORE INSERT ON ASS1_MEMBER
FOR EACH ROW
BEGIN
SELECT ASS1_MEMBER_SEQ.NEXTVAL
INTO :NEW.MEMBER_NBR
FROM DUAL;
END;
/


